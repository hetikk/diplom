Непрерывная интеграция/внедрение приложения Symfony с помощью docker-compose и GitLab CI
Разработка веб-сайтов,
Symfony
Tutorial
В статье я поделюсь своим опытом автоматизации всего процесса разработки приложения Symfony с нуля от настройки инфраструктуры до деплоя в production. От development- и до production-окружения для запуска приложения будет использоваться docker-compose, а все процедуры непрерывной интеграции/внедрения будут запускаться через GitLab CI/CD Pipelines в docker-контейнерах.


Подразумевается, что вы знакомы с docker и docker-compose. Если нет или вы не знаете как его установить, я подготовил инструкцию по подготовке локального окружения разработчика. Фактически, для работы над приложением потребуется только Docker, VirtualBox и, опционально, Yarn.


Запуск приложения локально

Я подготовил скелет приложения и выложил его на GitHub. Всё написанное ниже относится к приложениям, созданным на основе этого шаблона и к инфраструктуре, необходимой для запуска такого приложения.


Чтобы запустить приложение локально, нужно выполнить следущие команды:


git clone git@github.com:covex-nn/docker-workflow-symfony.git
cd docker-workflow-symfony
docker-compose up -d
docker-compose exec php phing

Сайт будет доступен по адресу http://docker.local/, добавлять app_dev.php/ к адресу не нужно. Будет запущено 4 контейнера: nginx, php, mysql и phpmyadmin (последний запускается только в development-окружении).


docker.local нужно прописать в файл hosts. Для Linux ip-адрес сайта будет 127.0.0.1, а под Windows его можно узнать в результате работы команды docker-machine env (всё таки см. инструкцию).


composer в контейнере php настроен таким образом, что папка vendor находится внутри контейнера, а не на хосте, и не оказывает влияние на быстродействие в локальном окружении разработчика.


Подготовка и настройка инфраструктуры

В боевых условиях для работы системы потребуется три сервера: GitLab — сервер для управления репозиториями Git и Container Registry, Docker для production — сервер для production-сайтов и Docker для разработки — сервер для pre-production и тестовых сайтов разработчиков.


GitLab
Docker для production
Docker для разработки
Над проектом будут работать несколько разработчиков, им нужно выдать доступ так, чтобы они ничего не сломали и не мешали друг другу.


Настройка доступа
У проекта будет один основной репозиторий и по одному репозиторию на каждого разработчика. Основной репозиторий будет источником для production- и staging-сайтов, репозиторий разработчика – для тестового сайта именно этого разработчика. Процессы деплоя для каждого из сайтов будут совпадать. Отличия будут только в конфигурации приложения и настройках доступа к серверу c Docker. Конфигурация и настройки будут храниться в GitLab, в разделе Settings -- CI/CD Pipelines: в основном репозитории – для production- и staging-сайтов, а в репозитории разработчика – для тестового сайта этого разработчика.


Создание и настройка основного репозитория
Создание и настройка репозитория разработчика
Последний шаг до начала работы – настройка Nginx на серверах с Docker. Этот Nginx будет настраиваться вручную, и все HTTP/HTTPS-запросы к приложениям Symfony будут им проксироваться в выбранный IP-адрес во внутренней, ранее созданной, подсети Docker (см. переменные NETWORK_NAME_... и NETWORK_IP_...).


Настройка внешнего Nginx
Процесс разработки

На данном этапе у разработчика есть доступ в свой собственный репозиторий. В своём репозитории он имеет роль Developer и может делать практически всё что угодно. В репозитории разработчика ветка master соответствует состоянию его тестового сайта. Protected-ветка stable — состоянию сайта staging.


Как выглядит процесс разработки для разработчика
Вместе с изменением в коде проекта, разработчик может добавлять новые значения в параметры приложения. Значения этих параметров могут отличаться в зависимости от окружения.


Настройка параметров Symfony
Также для разработчика в development-окружении доступно расширение xdebug, а управление CSS и Javascript файлами происходит при помощи Webpack Encore.


CI/CD изнутри

Процесс непрерывной интеграции/внедрения описан в файле .gitlab-ci.yml в корне репозитория, он состоит из 4 стадий: загрузка зависимостей, phpunit-тестирование, сборка, развёртывание.


Загрузка зависимостей

На данном этапе производится попытка установить все зависимости приложения через composer.


Этап deps stage в .gitlab-ci.yml
Результатом работы данного этапа будет наполнение папки /composer/home/cache. Эта папка сохраняется в volume у gitlab-ci-multi-runner и кэш composer будет доступен при выполнении всех последующих задач (как в текущей pipeline, так и в последующих).


PHPUnit-тестирование

Перед запуском собственно phpunit, создаются переменные окружения для работы приложения Symfony. Если какие-то значения переменных в testing-окружении должны отличаться значений во всех остальных окружениях — нужно создать такие переменные в настройках репозитория GitLab с суффиксом _TEST (например, ENV_hwi_facebook_client_id_TEST). Тогда её значение перекроет дефолтное из файла .env.


Этап test в .gitlab-ci.yml
Сборка

Здесь сборка для php-проекта — это создание docker-образов для контейнеров nginx и php, и выкладывание подготовленных образов в GitLab Container Registry.


Этап build в .gitlab-ci.yml
Здесь, задача build:docker-app-image-master создаёт образы PHP-приложения для staging-сайта (и для тестового сайта разработчика); а задача build:docker-app-image-production — для production-сайта. Для каждой задачи значения переменных из настроек pipeline с суффиксом _MASTER или _PRODUCTION перекрывают дефолтные значения из файла .env. Аналогичным образом описаны задачи по сборке образов nginx (см. задачи build:docker-nginx-image-master и build:docker-nginx-image-production).


Также на этом этапе создаётся файл docker-compose.yml, который на следующем этапе будет скопирован на удалённый сервер (см. задачи build:docker-compose-master и build:docker-compose-production). Сформированный файл docker-compose.yml содержит все переменные окружения, необходимые для запуска приложения. В секции services все контейнеры будут создаваться только на основе готовых образов docker.


Пример сформированного файла docker-compose.yml
Развёртывание

На данном этапе docker-образы приложения готовы и загружены в Container Registry. Осталось обновить приложения.


На удалённых серверах ceрвис phpmyadmin отсутствует; дополнительно к сервису php добавлен абсолютно такой же сервис spare; а в конфигурации nginx вместо одного сервера в upstream прописано два. Использование двух одинаковых сервисов позволило добиться практически нулевого deployment downtime.


Этап deploy в .gitlab-ci.yml
Алгоритм развёртывания следующий:


Копируем сформированный на этапе build файл docker-compose.yml
Загружаем новые образы из Container Registry
Обновляем контейнер spare
Обновляем статичные файлы для nginx, производим миграцию БД
Обновляем контейнер php
Обновляем контейнеры nginx и mysql (в боевых условиях — это не обязательно)

Во время обновления контейнеров spare или php, nginx через несколько секунд недоступности одного из них переключается на следующий доступный в upstream. Т.е. приложение работает правильно для 100% HTTP-запросов, но иногда с задержкой.


Во время выполнения миграции БД первая половина HTTP-запросов идёт в контейнер php, который может работать со старой структурой БД, а вторая половина — в контейнер spare, который может работать с только с новой структурой. Т.е. в обоих контейнерах возможны сбои в работе во время миграции БД. Но если допустить, что внесение изменений в структуру БД не такое уж и частое явление, то можно считать это вполне приемлемым.


Во время обновления контейнеров nginx и mysql, сайт недоступен вообще. Эти сервисы обновляются очень редко, обновление вообще можно производить вручную "ночью". Проверка возможности обновлений для этих контейнеров длится около 5 секунд, что примерно 80-90% от всего deployment downtime.


Заключение

GitLab Continuous Integration & Deployment и docker-compose — замечательные инструменты. Вместе с ними мы наконец-то смогли отказаться от использования vagrant в процессе разработки. Сайт проекта, запущенный локально, стал работать гораздо быстрее, даже с большим количеством библиотек, подключенных через composer.json. Development-окружение стало не просто схожим — теперь оно абсолютно такое же, как в production, исчезли ограничения использования технологий помимо Linux + Apache + PHP + MySQL. Параллельные изменения в коде разными разработчиками не конфликтуют друг с другом, а новая процедура деплоя позволяет выкладывать изменения гораздо чаще, чем мы могли бы себе позволить ранее.


Следующий шаг — использование docker swarm, или kubernetes, или оставим всё как есть. Пока не ясно, время покажет.

Теги:
symfony
docker-compose
gitlab
непрерывная интеграция
непрерывное внедрение
Хабы:
Разработка веб-сайтов
Symfony